# Generated by Django 4.2 on 2023-05-09 04:26

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import dynamic_filenames
import gifs.models
import pictures.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("categories", "0002_alter_category_options_alter_category_is_nsfw"),
        ("characters", "0004_alter_character_gender"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Gif",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file",
                    pictures.models.PictureField(
                        aspect_ratios=[None, "16/9"],
                        breakpoints={},
                        container_width=1200,
                        file_types=["WEBP", "GIF"],
                        grid_columns=12,
                        pixel_densities=[1, 2],
                        upload_to=dynamic_filenames.FilePattern(
                            filename_pattern="uploads/gifs/{uuid:base32}{ext}"
                        ),
                    ),
                ),
                (
                    "age_rating",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("sfw", "Sfw"),
                            ("questionable", "Questionable"),
                            ("suggestive", "Suggestive"),
                            ("borderline", "Borderline"),
                            ("explicit", "Explicit"),
                        ],
                        help_text="The image's sfw-ness.",
                        max_length=12,
                        null=True,
                    ),
                ),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("not_reviewed", "Not Reviewed"),
                            ("on_review", "On Review"),
                            ("declined", "Declined"),
                            ("verified", "Verified"),
                        ],
                        default="not_reviewed",
                        help_text="The image's verification status.",
                        max_length=12,
                    ),
                ),
                ("duration", models.FloatField(null=True)),
                (
                    "reactions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=30),
                        blank=True,
                        size=None,
                    ),
                ),
                (
                    "emotions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("sadness", "Sadness"),
                                ("happiness", "Happiness"),
                                ("fear", "Fear"),
                                ("anger", "Anger"),
                                ("surprise", "Surprise"),
                                ("disgust", "Disgust"),
                            ],
                            max_length=30,
                        ),
                        blank=True,
                        size=None,
                    ),
                ),
                (
                    "source_name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the platform where the original post was posted.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True, help_text="The image's original post.", null=True
                    ),
                ),
                (
                    "dominant_color",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.SmallIntegerField(),
                        blank=True,
                        null=True,
                        size=3,
                        validators=[gifs.models.Gif.validate_rgb_value],
                    ),
                ),
                (
                    "palette",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.ArrayField(
                            base_field=models.SmallIntegerField(),
                            size=3,
                            validators=[gifs.models.Gif.validate_rgb_value],
                        ),
                        blank=True,
                        null=True,
                        size=10,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="A reaction message that you'd see with the gif. For example: '$1 is patting $2!'. $1 and $2 are persons and will be replaced by the API user.",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("is_spoiler", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="gifs", to="categories.category"
                    ),
                ),
                (
                    "chaarcters",
                    models.ManyToManyField(
                        related_name="gifs", to="characters.character"
                    ),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
