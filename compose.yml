version: "3.8"
name: "nekos-api"
services:
  backend:
    build:
      context: ./api
      args:
        BACKEND_BUNNY_USERNAME: ${BACKEND_BUNNY_USERNAME}
        BACKEND_BUNNY_PASSWORD: ${BACKEND_BUNNY_PASSWORD}
        BACKEND_BUNNY_ZONE: ${BACKEND_BUNNY_ZONE}
        BACKEND_BUNNY_HOSTNAME: ${BACKEND_BUNNY_HOSTNAME}
    command: "/app/.venv/bin/python manage.py migrate && /app/.venv/bin/python /app/.venv/bin/gunicorn -b 0.0.0.0:8000 --workers 4 -k uvicorn.workers.UvicornWorker nekos_api.asgi:application"
    depends_on:
      - database
      - redis
    volumes:
      - static:/static
    env_file:
      - .env
    restart: always
    secrets:
      - BACKEND_SECRET_KEY
      - DATABASE_PASSWORD
  database:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/DATABASE_PASSWORD
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}
      LC_CTYPE: C.UTF-8
      LC_ALL: C.UTF-8
    volumes:
      - database:/var/lib/postgresql/data
    secrets:
      - DATABASE_PASSWORD
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DATABASE_NAME}", "-U", "${DATABASE_USER}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
  nginx:
    image: nginx:1-alpine
    depends_on:
      - backend
    volumes:
      - static:/static
      - ./nginx/nekosapi.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/errors:/etc/nginx/errors
    secrets:
      - NGINX_CERT_CERTIFICATE
      - NGINX_CERT_PRIVATE_KEY
    networks:
      - bridge
    ports:
      - "[${NGINX_IP}]:443:443"
    restart: always
secrets:
  BACKEND_SECRET_KEY:
    file: ./secrets/BACKEND_SECRET_KEY.txt
  DATABASE_PASSWORD:
    file: ./secrets/DATABASE_PASSWORD.txt
  NGINX_CERT_CERTIFICATE:
    file: ./secrets/NGINX_CERT_CERTIFICATE.pem
  NGINX_CERT_PRIVATE_KEY:
    file: ./secrets/NGINX_CERT_PRIVATE_KEY.pem
volumes:
  database:
  static:
networks:
  bridge:
    external: true